package org.example.books;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 4.1.0
 * 2025-02-19T22:06:07.248+01:00
 * Generated source version: 4.1.0
 *
 */
@WebServiceClient(name = "LibraryManagerService",
                  wsdlLocation = "file:/C:/Users/eweli/Desktop/AZNU-projekt-ET/library-manager/library-manager/src/main/resources/books.wsdl",
                  targetNamespace = "http://www.example.org/books/")
public class LibraryManagerService extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://www.example.org/books/", "LibraryManagerService");
    public static final QName LibraryManagerPort = new QName("http://www.example.org/books/", "LibraryManagerPort");
    static {
        URL url = null;
        try {
            url = URI.create("file:/C:/Users/eweli/Desktop/AZNU-projekt-ET/library-manager/library-manager/src/main/resources/books.wsdl").toURL();
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(LibraryManagerService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/eweli/Desktop/AZNU-projekt-ET/library-manager/library-manager/src/main/resources/books.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public LibraryManagerService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public LibraryManagerService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public LibraryManagerService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public LibraryManagerService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public LibraryManagerService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public LibraryManagerService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns LibraryManager
     */
    @WebEndpoint(name = "LibraryManagerPort")
    public LibraryManager getLibraryManagerPort() {
        return super.getPort(LibraryManagerPort, LibraryManager.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns LibraryManager
     */
    @WebEndpoint(name = "LibraryManagerPort")
    public LibraryManager getLibraryManagerPort(WebServiceFeature... features) {
        return super.getPort(LibraryManagerPort, LibraryManager.class, features);
    }

}
